// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`v-on > complex member expression w/ prefixIdentifiers: true 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => _ctx.a['b' + _ctx.c])
  return n0
}"
`;

exports[`v-on > dynamic arg 1`] = `
"import { renderEffect as _renderEffect, on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _renderEffect(() => _on(n0, _ctx.event, () => _ctx.handler))
  return n0
}"
`;

exports[`v-on > dynamic arg with complex exp prefixing 1`] = `
"import { renderEffect as _renderEffect, on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _renderEffect(() => _on(n0, _ctx.event(_ctx.foo), () => _ctx.handler))
  return n0
}"
`;

exports[`v-on > dynamic arg with prefixing 1`] = `
"import { renderEffect as _renderEffect, on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _renderEffect(() => _on(n0, _ctx.event, () => _ctx.handler))
  return n0
}"
`;

exports[`v-on > event modifier 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<a></a>")
const t1 = _template("<form></form>")
const t2 = _template("<div></div>")
const t3 = _template("<input>")

export function render(_ctx) {
  const n0 = t0()
  const n1 = t1()
  const n2 = t0()
  const n3 = t2()
  const n4 = t2()
  const n5 = t0()
  const n6 = t2()
  const n7 = t3()
  const n8 = t3()
  const n9 = t3()
  const n10 = t3()
  const n11 = t3()
  const n12 = t3()
  const n13 = t3()
  const n14 = t3()
  const n15 = t3()
  const n16 = t3()
  const n17 = t3()
  const n18 = t3()
  const n19 = t3()
  const n20 = t3()
  const n21 = t3()
  _on(n0, "click", () => _ctx.handleEvent, undefined, {
    modifiers: ["stop"]
  })
  _on(n1, "submit", () => _ctx.handleEvent, undefined, {
    modifiers: ["prevent"]
  })
  _on(n2, "click", () => _ctx.handleEvent, undefined, {
    modifiers: ["stop", "prevent"]
  })
  _on(n3, "click", () => _ctx.handleEvent, undefined, {
    modifiers: ["self"]
  })
  _on(n4, "click", () => _ctx.handleEvent, { capture: true })
  _on(n5, "click", () => _ctx.handleEvent, { once: true })
  _on(n6, "scroll", () => _ctx.handleEvent, { passive: true })
  _on(n7, "contextmenu", () => _ctx.handleEvent, undefined, {
    modifiers: ["right"]
  })
  _on(n8, "click", () => _ctx.handleEvent, undefined, {
    modifiers: ["left"]
  })
  _on(n9, "mouseup", () => _ctx.handleEvent, undefined, {
    modifiers: ["middle"]
  })
  _on(n10, "contextmenu", () => _ctx.handleEvent, undefined, {
    modifiers: ["right"]
  })
  _on(n11, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["enter"]
  })
  _on(n12, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["tab"]
  })
  _on(n13, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["delete"]
  })
  _on(n14, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["esc"]
  })
  _on(n15, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["space"]
  })
  _on(n16, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["up"]
  })
  _on(n17, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["down"]
  })
  _on(n18, "keyup", () => _ctx.handleEvent, undefined, {
    keys: ["left"]
  })
  _on(n19, "keyup", () => _ctx.submit, undefined, {
    modifiers: ["middle"]
  })
  _on(n20, "keyup", () => _ctx.submit, undefined, {
    modifiers: ["middle", "self"]
  })
  _on(n21, "keyup", () => _ctx.handleEvent, undefined, {
    modifiers: ["self"],
    keys: ["enter"]
  })
  return [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21]
}"
`;

exports[`v-on > function expression w/ prefixIdentifiers: true 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => e => _ctx.foo(e))
  return n0
}"
`;

exports[`v-on > inline statement w/ prefixIdentifiers: true 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => $event => (_ctx.foo($event)))
  return n0
}"
`;

exports[`v-on > multiple inline statements w/ prefixIdentifiers: true 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => $event => {_ctx.foo($event);_ctx.bar()})
  return n0
}"
`;

exports[`v-on > should NOT add a prefix to $event if the expression is a function expression 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => $event => {_ctx.i++;_ctx.foo($event)})
  return n0
}"
`;

exports[`v-on > should NOT wrap as function if expression is already function expression (with Typescript) 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => (e: any): any => _ctx.foo(e))
  return n0
}"
`;

exports[`v-on > should NOT wrap as function if expression is already function expression (with newlines) 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => 
      $event => {
        _ctx.foo($event)
      }
    )
  return n0
}"
`;

exports[`v-on > should NOT wrap as function if expression is already function expression 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => $event => _ctx.foo($event))
  return n0
}"
`;

exports[`v-on > should NOT wrap as function if expression is complex member expression 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => _ctx.a['b' + _ctx.c])
  return n0
}"
`;

exports[`v-on > should handle multi-line statement 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => $event => {
_ctx.foo();
_ctx.bar()
})
  return n0
}"
`;

exports[`v-on > should handle multiple inline statement 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => $event => {_ctx.foo();_ctx.bar()})
  return n0
}"
`;

exports[`v-on > should not prefix member expression 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => _ctx.foo.bar)
  return n0
}"
`;

exports[`v-on > should not wrap keys guard if no key modifier is present 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "keyup", () => _ctx.test, undefined, {
    modifiers: ["exact"]
  })
  return n0
}"
`;

exports[`v-on > should support multiple events and modifiers options w/ prefixIdentifiers: true 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => _ctx.test, undefined, {
    modifiers: ["stop"]
  })
  _on(n0, "keyup", () => _ctx.test, undefined, {
    keys: ["enter"]
  })
  return n0
}"
`;

exports[`v-on > should support multiple modifiers and event options w/ prefixIdentifiers: true 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => _ctx.test, { capture: true, once: true }, {
    modifiers: ["stop", "prevent"]
  })
  return n0
}"
`;

exports[`v-on > should transform click.middle 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "mouseup", () => _ctx.test, undefined, {
    modifiers: ["middle"]
  })
  return n0
}"
`;

exports[`v-on > should transform click.middle 2`] = `
"import { renderEffect as _renderEffect, on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _renderEffect(() => {
    _on(n0, (_ctx.event) === "click" ? "mouseup" : (_ctx.event), () => _ctx.test, undefined, {
      modifiers: ["middle"]
    })
  })
  return n0
}"
`;

exports[`v-on > should transform click.right 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "contextmenu", () => _ctx.test, undefined, {
    modifiers: ["right"]
  })
  return n0
}"
`;

exports[`v-on > should transform click.right 2`] = `
"import { renderEffect as _renderEffect, on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _renderEffect(() => {
    _on(n0, (_ctx.event) === "click" ? "contextmenu" : (_ctx.event), () => _ctx.test, undefined, {
      modifiers: ["right"],
      keys: ["right"]
    })
  })
  return n0
}"
`;

exports[`v-on > should wrap as function if expression is inline statement 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => $event => (_ctx.i++))
  return n0
}"
`;

exports[`v-on > should wrap both for dynamic key event w/ left/right modifiers 1`] = `
"import { renderEffect as _renderEffect, on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _renderEffect(() => {
    _on(n0, _ctx.e, () => _ctx.test, undefined, {
      modifiers: ["left"],
      keys: ["left"]
    })
  })
  return n0
}"
`;

exports[`v-on > should wrap in unref if identifier is setup-maybe-ref w/ inline: true 1`] = `
"(() => {
  const n0 = t0()
  const n1 = t0()
  const n2 = t0()
  _on(n0, "click", () => $event => (x.value=_unref(y)))
  _on(n1, "click", () => $event => (x.value++))
  _on(n2, "click", () => $event => ({ x: x.value } = _unref(y)))
  return [n0, n1, n2]
})()"
`;

exports[`v-on > should wrap keys guard for keyboard events or dynamic events 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "keydown", () => _ctx.test, { capture: true }, {
    modifiers: ["stop", "ctrl"],
    keys: ["a"]
  })
  return n0
}"
`;

exports[`v-on > should wrap keys guard for static key event w/ left/right modifiers 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "keyup", () => _ctx.test, undefined, {
    keys: ["left"]
  })
  return n0
}"
`;

exports[`v-on > simple expression 1`] = `
"import { on as _on, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  _on(n0, "click", () => _ctx.handleClick)
  return n0
}"
`;
